#!/bin/sh

# Usage:
#	 curl -sL raw.github.com/wstein/setup/master/dev-base | sh
# or shorter:
#	 curl -sL git.io/dev-based | sh
#
# git clone git://github.com/wstein/setup && cd setup && git checkout current
#
# check with docker:
# - Fedora: docker run -it --rm -v /root/setup/dev-base:/tmp/dev-base:ro --entrypoint=/usr/bin/sh fedora -c "/tmp/dev-base && zsh"
# - Debian: docker run -it --rm -v /root/setup/dev-base:/tmp/dev-base:ro --entrypoint=sh debian -c "apt update && apt install -y sudo && /tmp/dev-base && zsh"

set -e

# evaluates to one of apt, yum, unknown
PKG_MANAGER=$({ command -v apt || command -v yum || echo unknown; } | rev | cut -d/ -f1 | rev)

PACKAGES="bash-completion gpg wget curl libuser flatpak hub git fossil pv htop screen tmux aria2 jq neovim ffmpeg zsh graphviz sl screenfetch schroot"

# GUI installed?
if [ -n "$XDG_CURRENT_DESKTOP" ]; then
	PACKAGES="$PACKAGES gitk git-gui kitty meld keepassxc putty"
fi

# Gnome installed?
if [ "$XDG_CURRENT_DESKTOP" = "GNOME" ]; then
	PACKAGES="$PACKAGES gnome-tweak-tool"
fi

PACKAGES_DEBIAN="$PACKAGES graphicsmagick openjdk-11-jdk docker openssh-client docker-compose apt-transport-https"
PACKAGES_FEDORA="$PACKAGES GraphicsMagick java-11-openjdk-devel openssh gitui podman-compose podman-docker buildah skopeo toolbox"

# do not add git-flow, it does not well integrate with git-extras!
#ZSH_PLUGINS="github git git-extras tig docker docker-compose tmux"
#ZSH_THEME="avit"

main() {
	install_packages_$PKG_MANAGER

	base_configuration
	create_bin_folder
	install_git_flow
	install_git_toolbelt
	config_zsh

	# GUI installed?
	if [ -n "$XDG_CURRENT_DESKTOP" ]; then
		install_fira_code_nerd_font
		install_flatpak_packages
		install_jetbrains_toolbox
		install_vscode_$PKG_MANAGER
		config_vscode
	fi
}

install_packages_apt() {
	echo installing linux packages...

	sudo apt -y update
	sudo apt -y install $PACKAGES_DEBIAN
}

install_packages_yum() {
	echo installing linux packages...

	# setup rpmfusion repo
	sudo yum -y install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
	sudo yum -y install https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm

	sudo yum -y install $PACKAGES_FEDORA

	# Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
	sudo touch /etc/containers/nodocker
}

base_configuration() {
	echo doing base configuration...

	# crate $HOME/.local/bin
	if ! [ -d "$HOME/.local/bin" ]; then
		mkdir --parents "$HOME/.local/bin"
	fi

	# create vim alias
	echo "alias vim=nvim" | sudo tee -a /etc/profile.d/dev-base-aliases.sh >/dev/null

	# create ssh key
	if ! [ -f ~/.ssh/id_rsa ]; then
		ssh-keygen -t rsa -b 4096 -N "" -f ~/.ssh/id_rsa
	fi

	# don't use Wayland (obs does not support Wayland)
	if [ -f /etc/gdm/custom.conf ]; then
		sudo sed -e "s/#WaylandEnable/WaylandEnable=false/" /etc/gdm/custom.conf
	fi

	# add $HOME/bin and $HOME/.local/bin to .profile (for Debian distros)
	if [ -f "$HOME/.profile" ]; then
		cat <<-EOF >>"$HOME/.profile"
			if [ -d "$HOME/bin" ] ; then
				PATH="$HOME/bin:$PATH"
			fi
		EOF
	fi
}

create_bin_folder() {
	echo creating bin folder...

	# check to create ~/bin
	! test -d $HOME/bin && mkdir $HOME/bin

	cd "$HOME/bin"
	git init
	git remote add origin https://github.com/wstein/bin
	git pull origin master
	cd "$HOME"
}

install_vscode_apt() {
	echo installing Visual Studio Code...

	# setup vscode repo
	curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor >packages.microsoft.gpg
	sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
	sudo sh -c 'echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'

	sudo apt-get install apt-transport-https
	sudo apt-get update
	sudo apt-get install code
}

install_vscode_yum() {
	echo installing Visual Studio Code...

	# setup vscode repo
	sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
	sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'

	sudo yum -y update
	sudo yum -y install code
}

install_jetbrains_toolbox() {
	echo installing Jetbrains Toolbox...

	DL_LINK=$(curl -sL "https://data.services.jetbrains.com/products/releases?code=TBA&latest=true&type=release" | jq -r .TBA[0].downloads.linux.link)
	wget --continue --output-document=/tmp/jetbrains-toolbox.tgz "$DL_LINK"
	tar -xzv --strip-components=1 -C /tmp -f /tmp/jetbrains-toolbox.tgz

	# jetbrains-toolbox will automatically toolbox to ~/.local/share/...
	(/tmp/jetbrains-toolbox &)
}

install_fira_code_nerd_font() {
	echo installing Fira Code Nerd Font...

	for weight in Bold Light Medium Regular Retina SemiBold; do
		echo fetching Fira Code $weight
		wget --quiet --no-verbose --directory-prefix=/tmp "https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/FiraCode/${weight}/complete/Fira Code ${weight} Nerd Font Complete Mono.ttf"
	done

	test -d /usr/local/share/fonts || sudo mkdir --parents /usr/local/share/fonts
	sudo mv /tmp/Fira\ Code\ *.ttf /usr/local/share/fonts

	sudo fc-cache -f -v
}

install_flatpak_packages() {
	echo installing flatpak packages...

	# setup flatpak repo
	sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

	sudo flatpak install -y flathub com.axosoft.GitKraken flathub org.freeplane.App io.github.mmstick.FontFinder

	echo "alias gitkraken=flatpak run com.axosoft.GitKraken" | sudo tee -a /etc/profile.d/dev-base-aliases.sh >/dev/null
}

install_git_flow() {
	cd /tmp
	curl -sL https://raw.githubusercontent.com/petervanderdoes/gitflow-avh/develop/contrib/gitflow-installer.sh | sudo bash -s install stable
	cd $HOME
}

install_git_toolbelt() {
	curl -sL https://github.com/nvie/git-toolbelt/archive/v1.5.0.tar.gz | sudo tar xz --strip-components=1 --directory=/usr/local/bin/
}

config_vscode() {
	echo configuring VSCode...

	mkdir --parent ~/.config/Code/User
	cat >~/.config/Code/User/settings.json <<-EOF
		{
				"editor.fontFamily": "'FiraCode Nerd Font Mono','Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'",
				"editor.fontLigatures": true,
				"editor.formatOnSave": true,
				"telemetry.enableTelemetry": false,
				"telemetry.enableCrashReporter": false
		}
	EOF
	(code &)
}

config_zsh() {
	echo configuring zsh...

	curl -L git.io/antigen >"$HOME/.local/bin/antigen.zsh"

	if ! [ -d ~/.config/kitty ]; then
		test -d ~/.config/kitty || mkdir --parents ~/.config/kitty
		echo "font_family        FiraCode Nerd Font Mono" >~/.config/kitty/kitty.conf
	fi

	cat >~/.zshrc <<-EOF
		source $HOME/.local/bin/antigen.zsh

		# Load the oh-my-zsh's library.
		antigen use oh-my-zsh

		# Bundles from the default repo (robbyrussell's oh-my-zsh).
		#antigen bundle github < does not work with get-extras
		antigen bundle git
		antigen bundle git-extras
		antigen bundle fossil
		antigen bundle docker
		antigen bundle docker-compose
		antigen bundle tmux
		antigen bundle command-not-found

		# Syntax highlighting bundle.
		antigen bundle zsh-users/zsh-syntax-highlighting

		# Load the theme.
		antigen theme romkatv/powerlevel10k

		# Tell Antigen that you're done.
		antigen apply
	EOF

	echo /usr/bin/zsh | sudo lchsh "$(whoami)"
}

main "$@"
